{"_path":"/guides/merchant-integration-error-handling","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Merchant Integration Error Handling","description":"Below are our guidelines for dealing with inconsistencies in Payment Request statuses due to network issues or race conditions.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Below are our guidelines for dealing with inconsistencies in "},{"type":"element","tag":"a","props":{"href":"https://docs.centrapay.com/api/payment-requests#payment-request","rel":["nofollow"]},"children":[{"type":"text","value":"Payment Request"}]},{"type":"text","value":" statuses due to network issues or race conditions."}]},{"type":"element","tag":"section","props":{},"children":[{"type":"element","tag":"h2","props":{"id":"respect-the-payment-request-status"},"children":[{"type":"text","value":"Respect the Payment Request Status"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Use the Payment Request status as the source of truth when determining if a Payment Request is paid or expired. For example, if cancelling a Payment Request fails with a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"REQUEST_PAID"}]},{"type":"text","value":" error then the terminal should respond accordingly; either by showing the transaction as paid or "},{"type":"element","tag":"a","props":{"href":"https://docs.centrapay.com/api/payment-requests#void-a-payment-request-experimental","rel":["nofollow"]},"children":[{"type":"text","value":"initiating a void"}]},{"type":"text","value":" instead."}]},{"type":"element","tag":"section","props":{},"children":[{"type":"element","tag":"h3","props":{"id":"void-when-the-status-is-unknown"},"children":[{"type":"text","value":"Void When the Status is Unknown"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If the status of a transaction cannot be determined to be successful after retrying, then the Payment Request should be voided. "},{"type":"element","tag":"a","props":{"href":"https://docs.centrapay.com/api/payment-requests#void","rel":["nofollow"]},"children":[{"type":"text","value":"Voiding a Payment Request"}]},{"type":"text","value":" will cancel the request and trigger any refunds if necessary."}]}]}]},{"type":"element","tag":"section","props":{},"children":[{"type":"element","tag":"h2","props":{"id":"ensure-the-pos-times-out-after-the-payment-request"},"children":[{"type":"text","value":"Ensure the POS times out after the Payment Request"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Payment Requests have a configurable timeout which defaults to 2 minutes. Integrators should make sure that the payment terminal times out 5-10 seconds "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"after"}]},{"type":"text","value":" the Payment Request."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For example, if the Point of Sale (POS) has a 90-second payment timeout then the Payment Request could be created with an 85-second timeout to prevent the payment terminal expiring at the same time as the payment request is paid."}]}]},{"type":"element","tag":"section","props":{},"children":[{"type":"element","tag":"h2","props":{"id":"retry-unknown-errors"},"children":[{"type":"text","value":"Retry Unknown Errors"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When faced with an unknown error while checking the status of a Payment Request, POS integrations should retry at least once before voiding the transaction."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Retries should use the appropriate idempotency key where applicable."}]}]}]},{"type":"element","tag":"section","props":{},"children":[{"type":"element","tag":"h2","props":{"id":"resolving-persistent-errors"},"children":[{"type":"text","value":"Resolving Persistent Errors"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For issues that cannot be resolved, please reach out to Centrapay Support at "},{"type":"element","tag":"a","props":{"href":"mailto:integrations@centrapay.com"},"children":[{"type":"text","value":"integrations@centrapay.com"}]},{"type":"text","value":"."}]}]}]},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Below are our guidelines for dealing with inconsistencies in "},{"type":"element","tag":"a","props":{"href":"https://docs.centrapay.com/api/payment-requests#payment-request","rel":["nofollow"]},"children":[{"type":"text","value":"Payment Request"}]},{"type":"text","value":" statuses due to network issues or race conditions."}]},{"type":"element","tag":"section","props":{},"children":[{"type":"element","tag":"h2","props":{"id":"respect-the-payment-request-status"},"children":[{"type":"text","value":"Respect the Payment Request Status"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Use the Payment Request status as the source of truth when determining if a Payment Request is paid or expired. For example, if cancelling a Payment Request fails with a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"REQUEST_PAID"}]},{"type":"text","value":" error then the terminal should respond accordingly; either by showing the transaction as paid or "},{"type":"element","tag":"a","props":{"href":"https://docs.centrapay.com/api/payment-requests#void-a-payment-request-experimental","rel":["nofollow"]},"children":[{"type":"text","value":"initiating a void"}]},{"type":"text","value":" instead."}]},{"type":"element","tag":"section","props":{},"children":[{"type":"element","tag":"h3","props":{"id":"void-when-the-status-is-unknown"},"children":[{"type":"text","value":"Void When the Status is Unknown"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If the status of a transaction cannot be determined to be successful after retrying, then the Payment Request should be voided. "},{"type":"element","tag":"a","props":{"href":"https://docs.centrapay.com/api/payment-requests#void","rel":["nofollow"]},"children":[{"type":"text","value":"Voiding a Payment Request"}]},{"type":"text","value":" will cancel the request and trigger any refunds if necessary."}]}]}]},{"type":"element","tag":"section","props":{},"children":[{"type":"element","tag":"h2","props":{"id":"ensure-the-pos-times-out-after-the-payment-request"},"children":[{"type":"text","value":"Ensure the POS times out after the Payment Request"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Payment Requests have a configurable timeout which defaults to 2 minutes. Integrators should make sure that the payment terminal times out 5-10 seconds "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"after"}]},{"type":"text","value":" the Payment Request."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For example, if the Point of Sale (POS) has a 90-second payment timeout then the Payment Request could be created with an 85-second timeout to prevent the payment terminal expiring at the same time as the payment request is paid."}]}]},{"type":"element","tag":"section","props":{},"children":[{"type":"element","tag":"h2","props":{"id":"retry-unknown-errors"},"children":[{"type":"text","value":"Retry Unknown Errors"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When faced with an unknown error while checking the status of a Payment Request, POS integrations should retry at least once before voiding the transaction."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Retries should use the appropriate idempotency key where applicable."}]}]}]},{"type":"element","tag":"section","props":{},"children":[{"type":"element","tag":"h2","props":{"id":"resolving-persistent-errors"},"children":[{"type":"text","value":"Resolving Persistent Errors"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For issues that cannot be resolved, please reach out to Centrapay Support at "},{"type":"element","tag":"a","props":{"href":"mailto:integrations@centrapay.com"},"children":[{"type":"text","value":"integrations@centrapay.com"}]},{"type":"text","value":"."}]}]}],"toc":{"title":"","searchDepth":4,"depth":4,"links":[{"id":"respect-the-payment-request-status","depth":2,"text":"Respect the Payment Request Status","children":[{"id":"void-when-the-status-is-unknown","depth":3,"text":"Void When the Status is Unknown"}]},{"id":"ensure-the-pos-times-out-after-the-payment-request","depth":2,"text":"Ensure the POS times out after the Payment Request"},{"id":"retry-unknown-errors","depth":2,"text":"Retry Unknown Errors"},{"id":"resolving-persistent-errors","depth":2,"text":"Resolving Persistent Errors"}]}},"_type":"markdown","_id":"content:guides:merchant-integration-error-handling.md","_source":"content","_file":"guides/merchant-integration-error-handling.md","_extension":"md"}