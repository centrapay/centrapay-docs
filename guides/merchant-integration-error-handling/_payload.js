export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W){return {data:{"content-query-n22gtwgo7B":{_path:"\u002Fguides\u002Fmerchant-integration-error-handling",_draft:j,_partial:j,_locale:"en",_empty:j,title:"Merchant Integration Error Handling",description:"Below are our guidelines for dealing with inconsistencies in Payment Request statuses due to network issues or race conditions.",excerpt:{type:u,children:[{type:a,tag:c,props:{},children:[{type:b,value:v},{type:a,tag:e,props:{href:w,rel:[g]},children:[{type:b,value:x}]},{type:b,value:y}]},{type:a,tag:d,props:{},children:[{type:a,tag:f,props:{id:k},children:[{type:b,value:l}]},{type:a,tag:c,props:{},children:[{type:b,value:z},{type:a,tag:h,props:{},children:[{type:b,value:A}]},{type:b,value:B},{type:a,tag:e,props:{href:C,rel:[g]},children:[{type:b,value:D}]},{type:b,value:E}]},{type:a,tag:d,props:{},children:[{type:a,tag:F,props:{id:m},children:[{type:b,value:n}]},{type:a,tag:c,props:{},children:[{type:b,value:G},{type:a,tag:e,props:{href:H,rel:[g]},children:[{type:b,value:I}]},{type:b,value:J}]}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:f,props:{id:o},children:[{type:b,value:p}]},{type:a,tag:c,props:{},children:[{type:b,value:K},{type:a,tag:L,props:{},children:[{type:b,value:M}]},{type:b,value:N}]},{type:a,tag:c,props:{},children:[{type:b,value:O}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:f,props:{id:q},children:[{type:b,value:r}]},{type:a,tag:c,props:{},children:[{type:b,value:P}]},{type:a,tag:Q,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:R}]}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:f,props:{id:s},children:[{type:b,value:t}]},{type:a,tag:c,props:{},children:[{type:b,value:S},{type:a,tag:e,props:{href:T},children:[{type:a,tag:h,props:{},children:[{type:b,value:U}]}]},{type:b,value:V}]}]}]},body:{type:u,children:[{type:a,tag:c,props:{},children:[{type:b,value:v},{type:a,tag:e,props:{href:w,rel:[g]},children:[{type:b,value:x}]},{type:b,value:y}]},{type:a,tag:d,props:{},children:[{type:a,tag:f,props:{id:k},children:[{type:b,value:l}]},{type:a,tag:c,props:{},children:[{type:b,value:z},{type:a,tag:h,props:{},children:[{type:b,value:A}]},{type:b,value:B},{type:a,tag:e,props:{href:C,rel:[g]},children:[{type:b,value:D}]},{type:b,value:E}]},{type:a,tag:d,props:{},children:[{type:a,tag:F,props:{id:m},children:[{type:b,value:n}]},{type:a,tag:c,props:{},children:[{type:b,value:G},{type:a,tag:e,props:{href:H,rel:[g]},children:[{type:b,value:I}]},{type:b,value:J}]}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:f,props:{id:o},children:[{type:b,value:p}]},{type:a,tag:c,props:{},children:[{type:b,value:K},{type:a,tag:L,props:{},children:[{type:b,value:M}]},{type:b,value:N}]},{type:a,tag:c,props:{},children:[{type:b,value:O}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:f,props:{id:q},children:[{type:b,value:r}]},{type:a,tag:c,props:{},children:[{type:b,value:P}]},{type:a,tag:Q,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:R}]}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:f,props:{id:s},children:[{type:b,value:t}]},{type:a,tag:c,props:{},children:[{type:b,value:S},{type:a,tag:e,props:{href:T},children:[{type:a,tag:h,props:{},children:[{type:b,value:U}]}]},{type:b,value:V}]}]}],toc:{title:"",searchDepth:W,depth:W,links:[{id:k,depth:i,text:l,children:[{id:m,depth:3,text:n}]},{id:o,depth:i,text:p},{id:q,depth:i,text:r},{id:s,depth:i,text:t}]}},_type:"markdown",_id:"content:guides:merchant-integration-error-handling.md",_source:"content",_file:"guides\u002Fmerchant-integration-error-handling.md",_extension:"md"}},prerenderedAt:void 0}}("element","text","p","section","a","h2","nofollow","code-inline",2,false,"respect-the-payment-request-status","Respect the Payment Request Status","void-when-the-status-is-unknown","Void When the Status is Unknown","ensure-the-pos-times-out-after-the-payment-request","Ensure the POS times out after the Payment Request","retry-unknown-errors","Retry Unknown Errors","resolving-persistent-errors","Resolving Persistent Errors","root","Below are our guidelines for dealing with inconsistencies in ","https:\u002F\u002Fdocs.centrapay.com\u002Fapi\u002Fpayment-requests#payment-request","Payment Request"," statuses due to network issues or race conditions.","Use the Payment Request status as the source of truth when determining if a Payment Request is paid or expired. For example, if cancelling a Payment Request fails with a ","REQUEST_PAID"," error then the terminal should respond accordingly; either by showing the transaction as paid or ","https:\u002F\u002Fdocs.centrapay.com\u002Fapi\u002Fpayment-requests#void-a-payment-request-experimental","initiating a void"," instead.","h3","If the status of a transaction cannot be determined to be successful after retrying, then the Payment Request should be voided. ","https:\u002F\u002Fdocs.centrapay.com\u002Fapi\u002Fpayment-requests#void","Voiding a Payment Request"," will cancel the request and trigger any refunds if necessary.","Payment Requests have a configurable timeout which defaults to 2 minutes. Integrators should make sure that the payment terminal times out 5-10 seconds ","strong","after"," the Payment Request.","For example, if the Point of Sale (POS) has a 90-second payment timeout then the Payment Request could be created with an 85-second timeout to prevent the payment terminal expiring at the same time as the payment request is paid.","When faced with an unknown error while checking the status of a Payment Request, POS integrations should retry at least once before voiding the transaction.","blockquote","Retries should use the appropriate idempotency key where applicable.","For issues that cannot be resolved, please reach out to Centrapay Support at ","mailto:integrations@centrapay.com","integrations@centrapay.com",".",4))