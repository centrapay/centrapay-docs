---

const { type = "default", text, link, inverse = false } = Astro.props;
const badgeText = text ? text : type;

const coloursMap = {
  experimental: 'bg-surface-accent-light text-content-accent border-outline-opaque',
  required: 'bg-surface-accent text-content-on-color border-outline-opaque',
  GET: 'border-green-400 bg-green-100 text-content-primary',
  POST: 'border-cyan-400 bg-cyan-100 text-content-primary',
  PUT: 'border-orange-400 bg-orange-100 text-content-primary',
  DELETE: 'border-red-400 bg-rose-100 text-content-primary',
  default: 'text-content-primary border-outline-opaque bg-surface-tertiary',
  deprecated: 'text-content-on-color border-outline-opaque bg-red-800',
}

const inverseColoursMap = {
  experimental: 'bg-surface-accent-light text-content-accent border-outline-opaque',
  GET: 'border-green-500 bg-green-800 text-content-inverse-primary',
  POST: 'border-cyan-500 bg-cyan-800 text-content-inverse-primary',
  PUT: 'border-orange-500 bg-orange-800 text-content-inverse-primary',
  DELETE: 'border-red-500 bg-rose-800 text-content-inverse-primary',
  default: 'text-content-primary border-outline-opaque bg-surface-tertiary',
  deprecated: 'text-content-on-color border-outline-opaque bg-red-800',
}

const map = inverse ? inverseColoursMap : coloursMap;
const badgeClass =`${map[type]} type-caption-2 px-2 py-0.5 rounded-full border`;

---
<span class="not-prose flex items-center">
  {link ?
    <a class={badgeClass + ' underline'} href={link}>{badgeText}</a> :
    <span class={badgeClass}>{badgeText}</span>
  }
</span>
