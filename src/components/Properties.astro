---
const { heading = 'Attributes' } = Astro.props;
---

<div data-attributes class="my-6">
  <div class="flex justify-between items-center not-prose py-2">
    <h3 class="type-subtitle-1">{ heading }</h3>
    <button data-expand-button class="text-content-tertiary type-overline hover:text-content-secondary">
      Expand all
    </button>
  </div>
  <ul
    role="list"
    class="m-0 list-none border-y border-outline-transparent divide-y divide-outline-transparent p-0 pt-4"
  >
    <slot />
  </ul>
</div>

<script>
  import getElement from '../utils/getElement';

  for (const attributesSection of document.querySelectorAll('[data-attributes]')) {
    const button = getElement('[data-expand-button]', HTMLButtonElement, attributesSection);
    const expandables = Array.from(attributesSection.querySelectorAll('[data-expandable]'));
    const carats = Array.from(attributesSection.querySelectorAll('[data-carat]'));
    button.addEventListener('click', () => {
      if (button.innerText === 'EXPAND ALL') {
        button.innerText = 'COLLAPSE ALL';
        expandables.forEach(e => e.classList.replace('collapsed', 'expanded'));
        carats.forEach(c => c.classList.add('expanded'));
      } else {
        button.innerText = 'EXPAND ALL';
        expandables.forEach(e => e.classList.replace('expanded', 'collapsed'));
        carats.forEach(c => c.classList.remove('expanded'));
      }
    });

    const attributes = attributesSection.querySelectorAll('[data-attribute]');
    for (const attribute of attributes) {
      const carat = getElement('[data-carat]', SVGElement, attribute)
      const expandable = getElement('[data-expandable]', HTMLDivElement, attribute);
      attribute.addEventListener('click', () => {
        if (expandable.classList.contains('expanded')) {
          expandable.classList.replace('expanded', 'collapsed');
          carat.classList.remove('expanded');
        } else {
          expandable.classList.replace('collapsed', 'expanded');
          carat.classList.add('expanded');
        }
        button.innerText = expandables.every(e => e.classList.contains('expanded')) ? 'COLLAPSE ALL' : 'EXPAND ALL';
      });
    }
  }
</script>

<style is:global>
  .expanded[data-expandable] {
    @apply
      pt-2
      opacity-100
      scale-y-100
    ;
  }

  .collapsed[data-expandable] {
    @apply
      h-0
      opacity-0
      scale-y-0
    ;
  }

  .expanded[data-carat] {
    @apply
    rotate-90
    ;
  }

  .group:hover #carat {
    @apply visible;
  }
</style>
